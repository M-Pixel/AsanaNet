<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#
 System.Xml.XmlDocument configurationData = new System.Xml.XmlDocument();
 configurationData.Load(@"/Users/Dell/Dysk Google/Private/Programming/[2013] AugmentedFS/Source Code/AsanaNet/AsanaNet/T4/AsanaFunctionDefinitions.xml");
 // 
 System.Xml.XmlNodeList functionList = configurationData.GetElementsByTagName("Function");
 System.Xml.XmlNodeList associationList = configurationData.GetElementsByTagName("Association");
 
Dictionary<string, List<System.Xml.XmlNode>> functionByParams = new Dictionary<string, List<System.Xml.XmlNode>>();
 
foreach (System.Xml.XmlNode function in functionList)
{
	if(function.Attributes["method"].Value != "GET")
		continue;
		
	string[] parameters = function.Attributes["parameters"].Value.Split(',');
	string parameterStringWithType = "";
	string parameterStringNoType = "";
	string secondArgumentComma = "";
	for(int i = 0; i < parameters.Length; ++i)
	{
		if(!string.IsNullOrWhiteSpace(parameters[i]))
		{
			if(i < parameters.Length-1)
			{
				parameterStringWithType += parameters[i] + " arg" + (i+1) + ", ";
			}
			else
			{
				parameterStringWithType += parameters[i] + " arg" + (i+1);
			}
			parameterStringNoType += ", arg" + (i+1);
		}
		if(!string.IsNullOrWhiteSpace(parameterStringWithType))
		{
			secondArgumentComma = ", ";
		}
	}
			
	bool isCollection = false;
	bool.TryParse(function.Attributes["collection"].Value, out isCollection);
	string packMethodString = isCollection ? "PackAndSendResponseCollection" : "PackAndSendResponse";
	string responseTypeString = isCollection ? "AsanaCollectionResponseEventHandler" : "AsanaResponseEventHandler";

	string paramsCombined = parameterStringWithType + secondArgumentComma + responseTypeString;

	if(!functionByParams.ContainsKey(paramsCombined))
	{
		functionByParams.Add(paramsCombined, new List<System.Xml.XmlNode>());
	}
	functionByParams[paramsCombined].Add(function);
}

#>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
/*
* THIS FILE IS GENERATED! DO NOT EDIT!
* REFER TO AsanaFunctionDefinitions.xml
*/
namespace AsanaNet
{
		// Enums for all functions
		public enum Function
		{
		<#
			foreach (System.Xml.XmlNode function in functionList)
			{		
		#>
	<#= function.Attributes["name"].Value #>,
		<#
			} 
		#>
}

		// Function definitions specifically for the GET functions.
		public partial class Asana
		{
<#
		foreach (System.Xml.XmlNode function in functionList)
		{
			if(function.Attributes["method"].Value != "GET")
				continue;

			string[] parameters = function.Attributes["parameters"].Value.Split(',');
			string parameterStringWithType = "";
			string parameterStringNoType = "";
			string secondArgumentComma = "";
			for(int i = 0; i < parameters.Length; ++i)
			{
				if(!string.IsNullOrWhiteSpace(parameters[i]))
				{
					if(i < parameters.Length-1)
					{
						parameterStringWithType += parameters[i] + " arg" + (i+1) + ", ";
					}
					else
					{
						parameterStringWithType += parameters[i] + " arg" + (i+1);
					}
					parameterStringNoType += ", arg" + (i+1);
				}
				if(!string.IsNullOrWhiteSpace(parameterStringWithType))
				{
					secondArgumentComma = ", ";
				}
			}

			bool isCollection = false;
			bool.TryParse(function.Attributes["collection"].Value, out isCollection);
			string packMethodString = isCollection ? "PackAndSendResponseCollection" : "PackAndSendResponse";
			string responseTypeString = isCollection ? "AsanaCollectionResponseEventHandler" : "AsanaResponseEventHandler";
			string objectType = isCollection ? "AsanaObjectCollection<"+function.Attributes["return"].Value+">" : function.Attributes["return"].Value;
#>
			public async Task<<#= objectType #>> <#= function.Attributes["name"].Value #>(<#= parameterStringWithType #><#= secondArgumentComma #>string optFields = null, AsanaCacheLevel cacheLevel = AsanaCacheLevel.Default)
			{
                if (cacheLevel == AsanaCacheLevel.Default) cacheLevel = this.DefaultCacheLevel;

				string cachePath = <# if (function.Attributes["parameters"].Value != "Int64"){ 
				#>GetAsanaPartUri(AsanaFunction.GetFunction(Function.<#= function.Attributes["name"].Value #>)<#=parameterStringNoType#>); 
				<# } else { #>string.Format(new PropertyFormatProvider(), "{0}"<#= parameterStringNoType #>);<# } #>

                <#= objectType #> cachedObject = null;
                <#= !isCollection ? "if (cacheLevel >= AsanaCacheLevel.FillExisting)" : "" #>
                cachedObject = (<#= objectType #>) _objectCache.Get(cachePath);
                if (cacheLevel >= AsanaCacheLevel.UseExisting)
                {
                    if (cachedObject != null || cacheLevel == AsanaCacheLevel.UseExistingOrNull)
                        return cachedObject;
                }
			    Uri uri;
                if (optFields != null)
                    uri = GetBaseUriWithParams(AsanaFunction.GetFunction(Function.<#= function.Attributes["name"].Value #>), new Dictionary<string,object>{{"opt_fields", optFields}}<#=parameterStringNoType#>);
                else
                    uri = GetBaseUri(AsanaFunction.GetFunction(Function.<#= function.Attributes["name"].Value #>)<#=parameterStringNoType#>);

				var response = await AsanaRequest.GoAsync(this, AsanaFunction.GetFunction(Function.<#= function.Attributes["name"].Value #>), uri);
                var output = AsanaRequest.GetResponse<#= isCollection ? "Collection" : "" #>(response, this, cachedObject<#= isCollection ? ", cacheLevel >= AsanaCacheLevel.FillExisting" : "" #>);
				_objectCache.Set(cachePath, output);
				return output;
			}

<#		}
#>
		}

		// Binds the enums, formations and methods
		public partial class AsanaFunction
		{
			static internal void InitFunctions()
			{
		<#
			foreach (System.Xml.XmlNode function in functionList)
			{		
		#>
		Functions.Add(Function.<#=function.Attributes["name"].Value#>, new AsanaFunction("<#=function.Attributes["formation"].Value#>", "<#=function.Attributes["method"].Value#>"));
		<#
			}

			foreach (System.Xml.XmlNode association in associationList)
			{		
				string create = association.Attributes["create"].Value;
				string update = association.Attributes["update"].Value;
				string delete = association.Attributes["delete"].Value;

				if(!string.IsNullOrWhiteSpace(create))
					create = string.Format("GetFunction(Function.{0})", create);
				else
					create = "null";

				if(!string.IsNullOrWhiteSpace(update))
					update = string.Format("GetFunction(Function.{0})", update);
				else
					update = "null";

				if(!string.IsNullOrWhiteSpace(delete))
					delete = string.Format("GetFunction(Function.{0}))", delete);
				else
					delete = "null)";
		#>
		Associations.Add(typeof(<#=association.Attributes["type"].Value#>), new AsanaFunctionAssociation(<#=create#>, <#=update#>, <#=delete#>);
		<#
			} 
		#>

			}
		}


        // add function to the objects

<#
		foreach (System.Xml.XmlNode function in functionList)
		{
			if(function.Attributes["method"].Value != "GET")
				continue;

			string[] parameters = function.Attributes["parameters"].Value.Split(',');

			string parameterStringWithType = "";
			string parameterStringNoType = "";
			string secondArgumentComma = "";
			for(int i = 1; i < parameters.Length; ++i)
			{
				if(!string.IsNullOrWhiteSpace(parameters[i]))
				{
					if(i < parameters.Length-1)
					{
						parameterStringWithType += parameters[i] + " arg" + (i+1) + ", ";
					}
					else
					{
						parameterStringWithType += parameters[i] + " arg" + (i+1);
					}
					parameterStringNoType += ", arg" + (i+1);
				}
				if(!string.IsNullOrWhiteSpace(parameterStringWithType))
				{
					secondArgumentComma = ", ";
				}
			}
        
			bool isCollection = false;
			bool.TryParse(function.Attributes["collection"].Value, out isCollection);
			//string packMethodString = isCollection ? "PackAndSendResponseCollection" : "PackAndSendResponse";
			//string responseTypeString = isCollection ? "AsanaCollectionResponseEventHandler" : "AsanaResponseEventHandler";
			string objectType = isCollection ? "AsanaObjectCollection<"+function.Attributes["return"].Value+">" : function.Attributes["return"].Value;
            string justReturnName = function.Attributes["return"].Value.Substring("Asana".Length);
            justReturnName = justReturnName.EndsWith("y") ? justReturnName.TrimEnd("y".ToCharArray()) + "ies" : justReturnName + "s";
            if (parameters.Length > 0)
            {
#>
public partial class <#= parameters[0].StartsWith("Asana") ? parameters[0] : function.Attributes["return"].Value #> // : AsanaObject, IAsanaData
{
<#
if (parameters[0].StartsWith("Asana"))
{
if (parameters.Length == 1)
{
#>
	[AsanaDataAttribute     ("<#= justReturnName.ToLowerInvariant() #>",        SerializationFlags.Optional, "ID")]
    public <#= objectType #> <#= justReturnName #>
    {
        get 
        {
            var task = Get<#= justReturnName #>(null, AsanaCacheLevel.UseExistingOrNull);
            return !object.ReferenceEquals(task.Result, null) ? task.Result : <#= justReturnName #> = new <#= objectType #>();
        }
		private set 
		{
            if (!object.ReferenceEquals(value, null))
            {
			    string cachePath = Asana.GetAsanaPartUri(AsanaFunction.GetFunction(Function.<#= function.Attributes["name"].Value #>), this);
			    Host._objectCache.Set(cachePath, value);
            }
		}
    }
<#
}
#>
    public Task<<#= objectType #>> Get<#= justReturnName #>(<#= parameterStringWithType #><#= secondArgumentComma #>string optFields = null, AsanaCacheLevel cacheLevel = AsanaCacheLevel.Default)
    {
        if (!object.ReferenceEquals(Host, null))
            return Host.<#= function.Attributes["name"].Value #>(this<#= parameterStringNoType #>, optFields, cacheLevel)<# if (function.Attributes["inObjectSelf"] != null && !String.IsNullOrWhiteSpace(function.Attributes["inObjectSelf"].Value)) { 
#>
.ContinueWith(
                (prevTask) =>
                {
                    if (cacheLevel < AsanaCacheLevel.UseExistingOrNull)
<# if (isCollection) { #>
                        foreach (var obj in prevTask.Result)
                        {
                            obj.<#= function.Attributes["inObjectSelf"].Value #> = this;
                        }
<# } else { #>
                        prevTask.Result.<#= function.Attributes["inObjectSelf"].Value #>;
<# } #>
                    return prevTask.Result;
                }, TaskContinuationOptions.NotOnFaulted)
<# } #>;
        return null;
    }
<#
}
            else if (function.Attributes["name"].Value != "GetMe" && function.Attributes["name"].Value != "GetWorkspaces" && !isCollection)
            {
                #>
    public async override Task Refresh(string optFields = null)
    {
        if (!object.ReferenceEquals(Host, null))
            await Host.<#= function.Attributes["name"].Value #>(this.ID<#= parameterStringNoType #>, optFields, AsanaCacheLevel.Ignore);
    }
<#
}
#>
}

<#
            }
        }

		foreach (System.Xml.XmlNode function in functionList)
		{
			if(function.Attributes["method"].Value == "PUT" || function.Attributes["method"].Value == "GET")
				continue;

			string[] parameters = function.Attributes["parameters"].Value.Split(',');

			string parameterStringWithType = "";
			string parameterStringNoType = "";
			string secondArgumentComma = "";
			for(int i = 0; i < parameters.Length; ++i)
			{
				if(!string.IsNullOrWhiteSpace(parameters[i]))
				{
					if(i < parameters.Length-1)
					{
						parameterStringWithType += parameters[i] + " arg" + (i+1) + ", ";
					}
					else
					{
						parameterStringWithType += parameters[i] + " arg" + (i+1);
					}
					parameterStringNoType += ", arg" + (i+1);
				}
				if(!string.IsNullOrWhiteSpace(parameterStringWithType))
				{
					secondArgumentComma = ", ";
				}
			}
        
			//bool isCollection = false;
			//bool.TryParse(function.Attributes["collection"].Value, out isCollection);
			//string packMethodString = isCollection ? "PackAndSendResponseCollection" : "PackAndSendResponse";
			//string responseTypeString = isCollection ? "AsanaCollectionResponseEventHandler" : "AsanaResponseEventHandler";
            if (parameters[0].StartsWith("Asana")) //parameters.Length == 1 && 
            {
			string objectType = parameters[0];
            string objectProperty = !ReferenceEquals(function.Attributes["setProperty"], null) ? function.Attributes["setProperty"].Value : objectType.Substring("Asana".Length);
            string justParam = function.Attributes["modifies"].Value.Substring("Asana".Length).ToLowerInvariant();
            string justReturnName = function.Attributes["name"].Value; //.Replace("ToTask", "").Replace("FromTask", "").Replace("Task", "").Replace("CreateWorkspaceTag", "CreateTag");
            //justReturnName = justReturnName.EndsWith("y") ? justReturnName.TrimEnd("y".ToCharArray()) + "ies" : justReturnName + "s";
if (function.Attributes["method"].Value == "DELETE")
{
#>
public partial class <#= parameters[0] #> // : AsanaObject, IAsanaData
{
    public Task Delete()
    {
        return Host.Save(this, AsanaFunction.GetFunction(Function.<#= function.Attributes["name"].Value #>), new Dictionary<string, object>(0))<#
if (!ReferenceEquals(function.Attributes["addTo"], null) || !ReferenceEquals(function.Attributes["removeFrom"], null)) { 
#>.ContinueWith(
            (prevTask) =>
            {
                IsRemoved = true; // invokes destroying all of the references to this object
/*
                //Asana.RemoveFromAllCacheListsOfType<<#= parameters[0] #>>(this, Host);
                var listsPossiblyContainingThis = Host._objectCache.GetAllOfType<AsanaObjectCollection<<#= parameters[0] #>>>("/");
                foreach (var list in listsPossiblyContainingThis)
                {
                    list.Remove(this);
                }
                //if (!ReferenceEquals(<#= !ReferenceEquals(function.Attributes["addTo"], null) ? function.Attributes["addTo"].Value : function.Attributes["removeFrom"].Value #>, null))
                //    <#= !ReferenceEquals(function.Attributes["addTo"], null) ? function.Attributes["addTo"].Value + ".Add" : function.Attributes["removeFrom"].Value + ".Remove" #>(this);
<# } #>
                ID = (Int64) AsanaExistance.Deleted;
*/
            }, TaskContinuationOptions.NotOnFaulted);

    }
}

<#
}
else if (function.Attributes["name"].Value.StartsWith("Create"))
{
#>
public partial class <#= parameters[0] #> // : AsanaObject, IAsanaData
{
    public Task<<#= objectType #>> <#= justReturnName #>(<#= function.Attributes["modifies"].Value #> arg)
    {
        arg.Host = Host;
        arg.<#= objectProperty #> = this;
        return Host.Save(arg, AsanaFunction.GetFunction(Function.<#= function.Attributes["name"].Value #>))<# //, param
if (!ReferenceEquals(function.Attributes["addTo"], null) || !ReferenceEquals(function.Attributes["removeFrom"], null)) { 
#>.ContinueWith(
            (prevTask) =>
                {
                    //if (!ReferenceEquals(<#= !ReferenceEquals(function.Attributes["addTo"], null) ? function.Attributes["addTo"].Value : function.Attributes["removeFrom"].Value #>, null))
                        <#= !ReferenceEquals(function.Attributes["addTo"], null) ? "if (!" + function.Attributes["addTo"].Value + ".Contains(arg)) " + function.Attributes["addTo"].Value + ".Add" : function.Attributes["removeFrom"].Value + ".Remove" #>(arg);
                    return this;
                }, TaskContinuationOptions.NotOnFaulted)<# } #>;
    }
}

<#
}
else if (function.Attributes["name"].Value.StartsWith("Set"))
{
#>
public partial class <#= parameters[0] #> // : AsanaObject, IAsanaData
{
    public Task <#= justReturnName #>(<#= function.Attributes["modifies"].Value #> arg)
    {
        Dictionary<string, object> param = new Dictionary<string, object> {{"<#= function.Attributes["paramName"] != null ? function.Attributes["paramName"].Value : justParam #>", arg.ID}};
        return Host.Save(this, AsanaFunction.GetFunction(Function.<#= function.Attributes["name"].Value #>), param);
        //Dictionary<string, object> param = Parsing.Serialize(arg, true, false);
        //param.Add("<#= justParam #>", ID);
        //return Host.Save(this, AsanaFunction.GetFunction(Function.<#= function.Attributes["name"].Value #>), param);
    }
}
<#
}
else if (function.Attributes["name"].Value.StartsWith("Add") || function.Attributes["name"].Value.StartsWith("Remove"))
{
#>
public partial class <#= parameters[0] #> // : AsanaObject, IAsanaData
{
    public Task <#= justReturnName #>(<#= function.Attributes["modifies"].Value #> arg)
    {
        Dictionary<string, object> param = new Dictionary<string, object> {{"<#= function.Attributes["paramName"] != null ? function.Attributes["paramName"].Value : justParam #>", arg.ID}};
        return Host.Save(this, AsanaFunction.GetFunction(Function.<#= function.Attributes["name"].Value #>), param)<# 
if (!ReferenceEquals(function.Attributes["addTo"], null) || !ReferenceEquals(function.Attributes["removeFrom"], null)) { 
#>.ContinueWith(
            (prevTask) =>
                <#= !ReferenceEquals(function.Attributes["addTo"], null) ? function.Attributes["addTo"].Value + ".Add" : function.Attributes["removeFrom"].Value + ".Remove" #>(arg), TaskContinuationOptions.NotOnFaulted)<# } #>;
    }
}
<#
}
            }
        }
#>

}
